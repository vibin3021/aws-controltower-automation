terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

#required_providers block: Defines the providers required for this configuration.
aws: Specifies the AWS provider.
source: The source of the provider (hashicorp/aws means it is maintained by HashiCorp).
version: The version constraint for the provider


  #Defines Terraform settings.
Specifies that the aws provider must be sourced from HashiCorp's provider registry.
Uses version ~> 5.0,

  provider "aws" {
  region = "us-east-1"
}
#Configures AWS as the cloud provider.
Sets the default region to us-east-1.

  data "aws_caller_identity" "current" {}
#Retrieves details of the currently authenticated AWS account.

data "aws_cloudtrail_service_account" "main" {}
#Fetches the AWS CloudTrail service account.
Used for setting permissions for CloudTrail logging.

  resource "aws_vpc" "main" {
  cidr_block = "10.0.0.0/16"
}
#Creates a new VPC with the CIDR block 10.0.0.0/16, allowing 65,536 IPs.
CIDR Block (10.0.0.0/16) defines a large range of IP addresses that can be used within an AWS VPC (Virtual Private Cloud).
10.0.0.0 → This is the starting IP address of the VPC.
/16 → This defines the size of the network, allowing 65,536 total IP addresses (from 10.0.0.0 to 10.0.255.255).
How Many Usable IPs?
Total IPs: 65,536
Usable IPs (AWS reserves 5 IPs per subnet): 65,531


resource "aws_subnet" "Ass_public_subnet" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  availability_zone       = "us-east-1a"
  map_public_ip_on_launch = true
}
#CIDR Block (10.0.1.0/24) tells AWS what range of IP addresses this subnet can use.
10.0.1.0 → This is the starting IP address of the subnet.
/24 → This means the subnet can hold 256 IP addresses (from 10.0.1.0 to 10.0.1.255).

#Creates a public subnet within the VPC.
Uses 10.0.1.0/24, allowing 256 IPs.
Located in us-east-1a availability zone.
Assigns a public IP to instances launched in this subnet.

  resource "aws_subnet" "Ass_private_subnet" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = "10.0.2.0/24"
  availability_zone = "us-east-1b"
}
# CIDR Block (10.0.2.0/24) tells AWS which IP addresses can be used in this subnet.
10.0.2.0 → This is the starting IP address of the subnet.
/24 → This means the subnet contains 256 IP addresses (from 10.0.2.0 to 10.0.2.255)
#Creates a private subnet within the VPC.
Uses 10.0.2.0/24, allowing 256 IPs.
Located in us-east-1b availability zone.
Does not assign a public IP


resource "aws_security_group" "Ass_sg" {
  vpc_id = aws_vpc.main.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
#Creates a security group within the VPC.
Allows inbound HTTP (port 80) traffic from anywhere (0.0.0.0/0).
  
IAM Policy Document for CloudTrail Logging
  resource "aws_s3_bucket" "cloudtrail_logs" {
  bucket        = "landing-zone-cloudtrail-logs"
  force_destroy = true
}
#Creates an S3 bucket named landing-zone-cloudtrail-logs for storing CloudTrail logs.
force_destroy = true ensures the bucket is deleted when running terraform destroy, even if it contains objects.

  Creates an S3 bucket named landing-zone-cloudtrail-logs for storing CloudTrail logs.
force_destroy = true ensures the bucket is deleted when running terraform destroy, even if it contains objects.
  #reates an IAM policy that allows AWS CloudTrail to write logs to the S3 bucket.
The first statement (AWSCloudTrailWrite):
Grants permission to CloudTrail to write logs (s3:PutObject).
Applies only to log files stored in the AWSLogs/{account_id}/* path.
Requires the bucket-owner-full-control ACL setting.
The second statement (AWSCloudTrailAclCheck):
Grants permission to CloudTrail to check the bucket ACL (s3:GetBucketAcl).


Attach Policy to the S3 Bucket
resource "aws_s3_bucket_policy" "allow_cloudtrail_logging" {
  bucket = aws_s3_bucket.cloudtrail_logs.id
  policy = data.aws_iam_policy_document.allow_cloudtrail_logging.json
}
#Attaches the previously defined IAM policy to the S3 bucket.
Ensures CloudTrail has the necessary permissions.


  CloudTrail Setup
resource "aws_cloudtrail" "main" {
  name           = "landing-zone-cloudtrail"
  s3_bucket_name = aws_s3_bucket.cloudtrail_logs.id
}
#Creates a CloudTrail instance named landing-zone-cloudtrail.
Sends logs to the specified S3 bucket.


  Enable AWS GuardDuty
resource "aws_guardduty_detector" "Ass_guardduty" {
  enable = true
}
#Enables AWS GuardDuty, a security threat detection service.




Component & 	Purpose
Terraform Provider	Sets up AWS as the provider
Caller Identity	Fetches AWS account details
CloudTrail Service Account	Retrieves AWS CloudTrail service account
VPC	Creates an isolated cloud network
Public & Private Subnets	Segments the network into public & private sections
Security Group	Manages inbound HTTP access (port 80)
S3 Bucket	Stores CloudTrail logs
IAM Policy for S3	Grants CloudTrail write permissions
CloudTrail Setup	Enables logging of AWS account activity
GuardDuty Detector	Enables AWS threat detection
